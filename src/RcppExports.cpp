// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MR_PATH
List MR_PATH(int K, const DataFrame& data, const List& initVals, bool overDispersedY, bool equalSds, bool computeSE, const int& Nstart_MC, int M, int max_Nsamples, int min_iters, int max_iters, double alpha, double gamma, double eps, bool verbose, bool saveTraj);
RcppExport SEXP _MRPATH_MR_PATH(SEXP KSEXP, SEXP dataSEXP, SEXP initValsSEXP, SEXP overDispersedYSEXP, SEXP equalSdsSEXP, SEXP computeSESEXP, SEXP Nstart_MCSEXP, SEXP MSEXP, SEXP max_NsamplesSEXP, SEXP min_itersSEXP, SEXP max_itersSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP saveTrajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type initVals(initValsSEXP);
    Rcpp::traits::input_parameter< bool >::type overDispersedY(overDispersedYSEXP);
    Rcpp::traits::input_parameter< bool >::type equalSds(equalSdsSEXP);
    Rcpp::traits::input_parameter< bool >::type computeSE(computeSESEXP);
    Rcpp::traits::input_parameter< const int& >::type Nstart_MC(Nstart_MCSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type max_Nsamples(max_NsamplesSEXP);
    Rcpp::traits::input_parameter< int >::type min_iters(min_itersSEXP);
    Rcpp::traits::input_parameter< int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type saveTraj(saveTrajSEXP);
    rcpp_result_gen = Rcpp::wrap(MR_PATH(K, data, initVals, overDispersedY, equalSds, computeSE, Nstart_MC, M, max_Nsamples, min_iters, max_iters, alpha, gamma, eps, verbose, saveTraj));
    return rcpp_result_gen;
END_RCPP
}
// getImportanceSamples
List getImportanceSamples(const DataFrame& data, const List& MCEM_fit, int Nsamples);
RcppExport SEXP _MRPATH_getImportanceSamples(SEXP dataSEXP, SEXP MCEM_fitSEXP, SEXP NsamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type MCEM_fit(MCEM_fitSEXP);
    Rcpp::traits::input_parameter< int >::type Nsamples(NsamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(getImportanceSamples(data, MCEM_fit, Nsamples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MRPATH_MR_PATH", (DL_FUNC) &_MRPATH_MR_PATH, 16},
    {"_MRPATH_getImportanceSamples", (DL_FUNC) &_MRPATH_getImportanceSamples, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MRPATH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
